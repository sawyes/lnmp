version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

services:
### Adminer ###########################################
    adminer:
      image: adminer:latest
      ports:
        - "${ADM_PORT}:8080"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend
### pgAdmin ##############################################
    pgadmin:
      build: ./pgadmin
      ports:
        - "${PGADMIN_PORT}:5050"
      volumes:
        - ${DATA_PATH_HOST}/pgadmin-backup:/var/lib/pgadmin/storage/pgadmin4
      networks:
        - frontend
        - backend
### NGINX Server #########################################
    nginx:
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - APP_USER=${APP_USER}
          - APP_UID=${APP_UID}
          - ENABLE_PHP54=${UPSTREAM_ENABLE_PHP54}
          - ENABLE_PHP55=${UPSTREAM_ENABLE_PHP55}
          - ENABLE_PHP56=${UPSTREAM_ENABLE_PHP56}
          - ENABLE_PHP70=${UPSTREAM_ENABLE_PHP70}
          - ENABLE_PHP71=${UPSTREAM_ENABLE_PHP71}
          - ENABLE_PHP72=${UPSTREAM_ENABLE_PHP72}
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${LOGS_PATH}/nginx:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      environment:
        - TZ=${TIMEZONE}
      restart: always
      networks:
        - frontend
        - backend

### PHP-FPM ##############################################
    php-fpm:
      build:
        context: ./php-fpm
        args:
          - PHP_VERSION=${PHP_VERSION}
          - SWOOLE_VERSION=${SWOOLE_VERSION}
          - HIREDIS_VERSION=${HIREDIS_VERSION}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - COMPOSER_REPO_PACKAGIST=${COMPOSER_REPO_PACKAGIST}
          - HTTP_PROXY=${HTTP_PROXY}
          - APP_USER=${APP_USER}
          - APP_UID=${APP_UID}
          - APP_GROUP=${APP_GROUP}
          - APP_GID=${APP_GID}

          - INSTALL_WKHTMLTOPDF=${PHP_FPM_INSTALL_WKHTMLTOPDF}
          - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PDO=${PHP_FPM_INSTALL_PDO}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_ZIP=${PHP_FPM_INSTALL_ZIP}
          - INSTALL_MBSTRING=${PHP_FPM_INSTALL_MBSTRING}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GD=${PHP_FPM_INSTALL_GD}

          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_HIREDIS=${PHP_FPM_INSTALL_HIREDIS}
          - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./php-fpm/crontab/:/etc/cron.d/
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - TZ=${TIMEZONE}
      restart: always
      networks:
        - backend

### PHP-FPM 54 ###########################################
    php-fpm54:
      build:
        context: ./php-fpm
        dockerfile: php-fpm54.dockerfile
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - COMPOSER_REPO_PACKAGIST=${COMPOSER_REPO_PACKAGIST}
          - HTTP_PROXY=${HTTP_PROXY}
          - APP_USER=${APP_USER}
          - APP_UID=${APP_UID}
          - APP_GROUP=${APP_GROUP}
          - APP_GID=${APP_GID}

          - INSTALL_WKHTMLTOPDF=${PHP_FPM_INSTALL_WKHTMLTOPDF}
          - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_PDO=${PHP_FPM_INSTALL_PDO}
          - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
          - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
          - INSTALL_ZIP=${PHP_FPM_INSTALL_ZIP}
          - INSTALL_MBSTRING=${PHP_FPM_INSTALL_MBSTRING}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_GD=${PHP_FPM_INSTALL_GD}

          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_MCRYPT=${PHP_FPM_INSTALL_MCRYPT}
      volumes:
        - ./php-fpm/php5.4.ini:/usr/local/etc/php/php.ini
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./php-fpm/php-fpm54.ini:/usr/local/etc/php-fpm.conf
      expose:
        - "9054"  
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - TZ=${TIMEZONE}
      restart: always
      networks:
        - backend

### Redis ################################################
    redis:
      build:
        context: ./redis
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
        - ${LOGS_PATH}/redis:/var/log/redis
      ports:
        - "${REDIS_PORT}:6379"
#        - "6379:6379"
      environment:
        - TZ=${TIMEZONE}
      networks:
        - backend
      restart: always

### gitlab ################################################
    gitlab:
      image: gitlab/gitlab-ce:latest
      hostname: '${GITLAB_HOSTNAME}'
      build:
        context: ./gitlab
        args:
          - TZ=${TIMEZONE}
      volumes:
        #data
        - ${DATA_PATH_HOST}/gitlab:/var/opt/gitlab
        - ${LOGS_PATH}/gitlab:/var/log/gitlab
        - ./gitlab/config:/etc/gitlab
      ports:
        - "9480:80"
        # - "9443:443"
        - "${GITLAB_HOST_SSH_PORT}:22"
      environment:
        GITLAB_OMNIBUS_CONFIG: |
          external_url '${GITLAB_EXTERNAL_URL}'
          redis['enable'] = true
          gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_HOST_SSH_PORT}
#          nginx['listen_https'] = false
#          nginx['listen_port'] = 80
#          postgresql['enable'] = false
#          gitlab_rails['trusted_proxies'] = ['caddy','nginx','apache2']
#          gitlab_rails['redis_host'] = 'redis'
#          gitlab_rails['redis_database'] = 8
#          gitlab_rails['db_host'] = 'postgres'
#          gitlab_rails['db_username'] = 'laradock_gitlab'
#          gitlab_rails['db_password'] = 'laradock_gitlab'
#          gitlab_rails['db_database'] = 'laradock_gitlab'
#          gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
      networks:
        - backend
      restart: always

    gitlab-runner:
      image: gitlab/gitlab-runner:latest
      environment:
        - CI_SERVER_URL=${GITLAB_DOMAIN_NAME}
      volumes:
        - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock:rw
      restart: always
### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        args:
        - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TIMEZONE}
      volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
      - "${MYSQL_PORT}:3306"
      networks:
      - backend
### PostgreSQL ###########################################
    postgres:
      build: ./postgres
      volumes:
        - ${DATA_PATH_HOST}/postgres:${PGDATA}
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - PGDATA=${PGDATA}/pgdata
      networks:
        - backend
### showdoc ###########################################
    showdoc:
      build: ./showdoc
      ports:
        - 4999:80
      networks:
        - backend

### rocketmq ###########################################
    # broker  
    rocketmq:
      image: foxiswho/rocketmq:broker-4.7.0
      ports:
        - "10911:10911"
        - "10909:10909"
      depends_on:
        - rocketmq-nameserver
        - rocketmq-console
      environment:
        - TZ=${TIMEZONE}  
        - NAMESRV_ADDR=rocketmq-nameserver:9876
        - JAVA_OPTS=-Duser.home=/opt
        - JAVA_OPT_EXT=-server -Xms128m -Xmx128m
      volumes:
        - ./rocketmq/broker.conf:/etc/rocketmq/broker.conf
      restart: always
      networks:
        - backend  

    rocketmq-nameserver:
      image: foxiswho/rocketmq:server-4.7.0
      ports:
        - "9876:9876"
      environment:
        - TZ=${TIMEZONE}  
      restart: always
      networks:
        - backend  
    
    rocketmq-console:
      image: styletang/rocketmq-console-ng
      ports:
        - "8180:8080"
      environment:
        - TZ=${TIMEZONE}  
        - NAMESRV_ADDR=rocketmq-nameserver:9876
        - JAVA_OPTS=-Drocketmq.namesrv.addr=rocketmq-nameserver:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
      restart: always
      networks:
        - backend  
