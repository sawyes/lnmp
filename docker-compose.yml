version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

services:

### pgAdmin ##############################################
    pgadmin:
      build: ./pgadmin
      ports:
        - "${PGADMIN_PORT}:5050"
      volumes:
        - ${DATA_PATH_HOST}/pgadmin-backup:/var/lib/pgadmin/storage/pgadmin4
      networks:
        - frontend
        - backend

### Redis ################################################
    redis:
      build:
        context: ./redis
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
        - ${LOGS_PATH}/redis:/var/log/redis
      ports:
        - "${REDIS_PORT}:6379"
#        - "6379:6379"
      environment:
        - TZ=${TIMEZONE}
      networks:
        - backend
      restart: always

### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        args:
        - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend
### PostgreSQL ###########################################
    postgres:
      build: ./postgres
      volumes:
        - ${DATA_PATH_HOST}/postgres:${PGDATA}
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - PGDATA=${PGDATA}/pgdata
      networks:
        - backend
### PostgreSQL + PG Vector ###########################################
    pgvector:
      build: ./pgvector
      volumes:
        - ${DATA_PATH_HOST}/postgres:${PGDATA}
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - PGDATA=${PGDATA}/pgdata
      networks:
        - backend
### showdoc ###########################################
    showdoc:
      build: ./showdoc
      user: root
      privileged: true
      ports:
        - 4999:80
      volumes:
        - ${DATA_PATH_HOST}/showdoc_data/html:/var/www/html/
      networks:
        - backend

### rocketmq ###########################################
    # broker  
    rocketmq:
      image: foxiswho/rocketmq:broker-4.7.0
      ports:
        - "10911:10911"
        - "10909:10909"
      depends_on:
        - rocketmq-nameserver
        - rocketmq-console
      environment:
        - TZ=${TIMEZONE}  
        - NAMESRV_ADDR=rocketmq-nameserver:9876
        - JAVA_OPTS=-Duser.home=/opt
        - JAVA_OPT_EXT=-server -Xms128m -Xmx128m
      volumes:
        - ./rocketmq/broker.conf:/etc/rocketmq/broker.conf
      restart: always
      networks:
        - backend  

    rocketmq-nameserver:
      image: foxiswho/rocketmq:server-4.7.0
      ports:
        - "9876:9876"
      environment:
        - TZ=${TIMEZONE}  
      restart: always
      networks:
        - backend  
    
    rocketmq-console:
      image: styletang/rocketmq-console-ng
      ports:
        - "8180:8080"
      environment:
        - TZ=${TIMEZONE}  
        - NAMESRV_ADDR=rocketmq-nameserver:9876
        - JAVA_OPTS=-Drocketmq.namesrv.addr=rocketmq-nameserver:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
      restart: always
      networks:
        - backend  
